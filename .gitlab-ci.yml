stages:
  - deploy
  - test
  - push-notify
  - test-notify

telegram_deploy:
  stage: deploy
  image: docker:24-cli
  services:
    - docker:24-dind
  tags: [default]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
  before_script:
    - docker info
  script:
    - echo "Building new telegram-messenger Docker image..."
    - docker build -t telegram-messenger:latest .
    - echo "Cleaning up old Docker images..."
    - docker image prune -f --filter "label!=keep"
    - echo "Docker image built and old images cleaned up successfully!"
  only:
    - main

telegram_test:
  stage: test
  tags: [default]
  script:
    - echo "Running Telegram Test..."
    # To simulate failure, uncomment the next line
    # - exit 1
    - echo "Telegram Test results" > telegram-test.txt
  artifacts:
    paths:
      - telegram-test.txt
    expire_in: 1 hour
    when: always

telegram_push_notify:
  stage: push-notify
  image: telegram-messenger:latest
  tags: [default]
  dependencies:
    - telegram_deploy
  script:
    - echo "Sending Telegram push notification..."
  only:
    - branches
  except:
    - tags
  variables:
    CHAT_ID: ${DEVTEAM_ID}
    THREAD_ID: ${DEPLOY_ID}
    PUSH: "TRUE"
  when: always

telegram_test_notify:
  stage: test-notify
  image: telegram-messenger:latest
  tags: [default]
  dependencies:
    - telegram_deploy
    - telegram_test
  before_script:
    - |
      if [ -f "telegram-test.txt" ]; then
        export FILE="telegram-test.txt"
        export TEXT="Telegram Test Succeeded"
      else
        export TEXT="Telegram Test Failed"
      fi
  script:
    - |
      if [ -f "telegram-test.txt" ]; then
        echo "Test job succeeded. Sending Telegram Test results file..."
      else
        echo "Test job failed. Sending failure telegram notification..."
      fi
  only:
    - branches
  except:
    - tags
  variables:
    CHAT_ID: ${DEVTEAM_ID}
    THREAD_ID: ${TEST_ID}
  when: always
